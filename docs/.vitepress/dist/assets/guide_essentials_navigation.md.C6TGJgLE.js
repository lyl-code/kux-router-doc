import{_ as s,c as a,o as t,a5 as i}from"./chunks/framework.fnDmWd_6.js";const E=JSON.parse('{"title":"编程式导航","description":"","frontmatter":{},"headers":[],"relativePath":"guide/essentials/navigation.md","filePath":"guide/essentials/navigation.md"}'),e={name:"guide/essentials/navigation.md"},n=i(`<h1 id="编程式导航" tabindex="-1">编程式导航 <a class="header-anchor" href="#编程式导航" aria-label="Permalink to &quot;编程式导航&quot;">​</a></h1><p>除了使用 <code>&lt;kux-router-link&gt;</code> 创建标签来自定义导航外，我们还可以通过 <code>router</code> 的实例方法来自定义跳转到导航的页面。</p><p>路由实例支持 <a href="https://doc.dcloud.net.cn/uni-app-x/api/" target="_blank" rel="noreferrer"><code>uniapp x API</code></a> 页面跳转的所有方法，具体参考下面说明：</p><table><thead><tr><th>声明式</th><th>编程式</th></tr></thead><tbody><tr><td><code>&lt;kux-router-link :to=&quot;...&quot;&gt;</code></td><td><code>router.push(...)</code></td></tr><tr><td><code>&lt;kux-router-link :to=&quot;...&quot; open-type=&quot;replace&quot;&gt;</code></td><td><code>router.replace(...)</code></td></tr><tr><td><code>&lt;kux-router-link :to=&quot;...&quot; open-type=&quot;reLaunch&quot;&gt;</code></td><td><code>router.reLaunch(...)</code></td></tr><tr><td><code>&lt;kux-router-link :to=&quot;...&quot; open-type=&quot;switchTab&quot;&gt;</code></td><td><code>router.switchTab(...)</code></td></tr><tr><td>-</td><td><code>router.back(...)</code></td></tr></tbody></table><p>下面以部分实例方法进行演示说明。</p><h2 id="导航到不同的位置" tabindex="-1">导航到不同的位置 <a class="header-anchor" href="#导航到不同的位置" aria-label="Permalink to &quot;导航到不同的位置&quot;">​</a></h2><div class="danger custom-block"><p class="custom-block-title">注意</p><p>下面以及文档中所有的 <code>router</code> 都是指代的路由实例本身。在页面内部你可以使用 <code>$router</code> 访问路由，如：<code>this.$router.push(...)</code>。如果使用的是 <code>组合式API</code>，你可以通过 <a href="/guide/advanced/composition-api.html"><code>useRouter</code></a> 来访问路由实例。</p></div><p>想要导航到不同的 URL，可以使用 <code>router.push</code> 方法。这个方法会向路由栈添加一个新的记录。该方法基于 <a href="https://doc.dcloud.net.cn/uni-app-x/api/navigator.html#navigateto" target="_blank" rel="noreferrer"><code>uni.navigateTo</code></a> 实现。</p><p>当你点击 <code>&lt;kux-router-link&gt;</code> 时，其实组件内部也会这个方法。相当于调用 <code>router.push(...)</code>:</p><table><thead><tr><th>声明式</th><th>编程式</th></tr></thead><tbody><tr><td><code>&lt;kux-router-link :to=&quot;...&quot;&gt;</code></td><td><code>router.push(...)</code></td></tr></tbody></table><h6 id="该方法有一个参数-参数类型支持多种-具体类型说明如下" tabindex="-1">该方法有一个参数，参数类型支持多种，具体类型说明如下： <a class="header-anchor" href="#该方法有一个参数-参数类型支持多种-具体类型说明如下" aria-label="Permalink to &quot;该方法有一个参数，参数类型支持多种，具体类型说明如下：&quot;">​</a></h6><table><thead><tr><th>类型名</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><a href="/api/interfaces/RouteRecordPath.html">RouteRecordPath</a></td><td>-</td><td>路由地址，该类型会在重新编译的时候根据 <code>pages.json</code> 自动更新</td></tr><tr><td><a href="/api/interfaces/RouteRecordNormalized.html">RouteRecordNormalized</a></td><td>-</td><td>创建路由表时的路由配置信息</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">说明</p><p>上面参数类型支持下面所有的方法，如 <code>router.replace</code>、<code>router.reLaunch</code> 以及 <code>router.switchTab</code></p></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 路径直传</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/pages/user/list&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 对象方式跳转，可以指定 \`query\` 参数，\`data\` 参数等其他内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/pages/user/info&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    query: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        member_id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RouteRecordNormalized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><code>router.push</code> 以及其他所有导航方法都会返回一个 <em><strong>Promise</strong></em>，这样我们可以等到导航完成后知道是导航成功还是失败了。你可以在 <a href="/guide/advanced/navigation-failures.html">导航故障</a> 中了解更多关于 <code>导航故障</code> 的情况。</p><h2 id="替换当前位置" tabindex="-1">替换当前位置 <a class="header-anchor" href="#替换当前位置" aria-label="Permalink to &quot;替换当前位置&quot;">​</a></h2><p>该方法类似于 <code>router.push</code>，不过它是关闭当前页面直接打开应用内的某个页面的形式。该方法基于 <a href="https://doc.dcloud.net.cn/uni-app-x/api/navigator.html#redirectto" target="_blank" rel="noreferrer"><code>uni.redirectTo</code></a> 实现。</p><table><thead><tr><th>声明式</th><th>编程式</th></tr></thead><tbody><tr><td><code>&lt;kux-router-link :to=&quot;...&quot; open-type=&quot;replace&quot;&gt;</code></td><td><code>router.replace(...)</code></td></tr></tbody></table><p>参数类型 <a href="#该方法有一个参数-参数类型支持多种-具体类型说明如下">同上</a></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 路径直传</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/pages/user/list&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 对象方式跳转，可以指定 \`query\` 参数，\`data\` 参数等其他内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/pages/user/info&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    query: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        member_id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RouteRecordNormalized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="横跨历史" tabindex="-1">横跨历史 <a class="header-anchor" href="#横跨历史" aria-label="Permalink to &quot;横跨历史&quot;">​</a></h2><p>该方法采用一个整数作为参数，表示在历史堆栈中后退多少步。方法基于 <a href="https://doc.dcloud.net.cn/uni-app-x/api/navigator.html#navigateback" target="_blank" rel="noreferrer"><code>uni.navigateBack</code></a> 实现。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回1条记录，与 uni.navigateBack() 相同</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">back</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回 3 条记录，与 uni.navigateBack({delta: 3}) 相同</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">back</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">注意</p><p>上面所有示例代码用到了 <a href="/api/interfaces/RouteRecordNormalized.html"><code>RouteRecordNormalized</code></a> 自定义类型，需要手动从路由库中手动导入该类型。</p></div>`,24),l=[n];function p(h,d,r,o,k,c){return t(),a("div",null,l)}const g=s(e,[["render",p]]);export{E as __pageData,g as default};
