import{_ as s,c as i,o as a,a5 as e}from"./chunks/framework.fnDmWd_6.js";const g=JSON.parse('{"title":"导航故障","description":"","frontmatter":{},"headers":[],"relativePath":"guide/advanced/navigation-failures.md","filePath":"guide/advanced/navigation-failures.md"}'),n={name:"guide/advanced/navigation-failures.md"},l=e(`<h1 id="导航故障" tabindex="-1">导航故障 <a class="header-anchor" href="#导航故障" aria-label="Permalink to &quot;导航故障&quot;">​</a></h1><p>当使用 <code>kux-router-link</code> 组件时，Kux Router 会自动调用 <code>router.push()</code> 来触发新的导航。一般情况下都会将用户导航到用户预期的新页面，但也有少数情况用户仍会留在同一页面：</p><ul><li>用户已经处在他们即将导航的页面。</li><li>一个 <a href="/guide/advanced/navigation-guards.html">导航守卫</a> 通过 <code>return false</code> 中断了导航。</li><li>当前导航还未完成，新的导航守卫出现。</li><li>一个 <a href="/guide/advanced/navigation-guards.html">导航守卫</a> 通过返回新的路由，从而重定向到了其他页面。</li><li>一个 <a href="/guide/advanced/navigation-guards.html">导航守卫</a> 抛出了一个 <code>Error</code>。</li></ul><h2 id="等待导航结果" tabindex="-1">等待导航结果 <a class="header-anchor" href="#等待导航结果" aria-label="Permalink to &quot;等待导航结果&quot;">​</a></h2><p>如果我们想在一个导航完成后做一些事情，我们需要在调用 <code>router.push</code> 后进行等待的方法。想象一下，我们有一个移动手机菜单，它允许我们进入不同的页面，而我们只想在导航到新页面后隐藏菜单，我们可能想这样做：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/my-profile&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isMenuOpen </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>这样做的话会马上关闭菜单，因为 <strong>导航是异步的</strong>，我们需要通过 <code>await</code> 关键字等待导航完成：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark has-focused-lines vp-code"><code><span class="line has-focus"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/my-profile&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isMenuOpen </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="全局导航故障" tabindex="-1">全局导航故障 <a class="header-anchor" href="#全局导航故障" aria-label="Permalink to &quot;全局导航故障&quot;">​</a></h2><p>你可以使用 <a href="/guide/adavanced/navigation-guards.html#全局后置钩子"><code>router.afterEach()导航守卫</code></a>检测全局导航故障：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">afterEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">failure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (failure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        sendToAnalytics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(to, from, failure);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="鉴别导航故障" tabindex="-1">鉴别导航故障 <a class="header-anchor" href="#鉴别导航故障" aria-label="Permalink to &quot;鉴别导航故障&quot;">​</a></h2><p>等待导航完成后，可以通过返回值是否为 <code>null</code> 以及是否为 <a href="/api/interfaces/NavigationFailure.html"><code>NavigationFailure</code></a> 类型来判断导航是否失败：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { NavigationFailure } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/uni_modules/kux-router&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 试图离开未保存的编辑文本界面</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> failure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/pages/articles/detail&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (failure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> failure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NavigationFailure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 给用户显示一个小通知</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    showToast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;你现在还未完成保存，是否现在就离开?&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="导航故障的属性" tabindex="-1">导航故障的属性 <a class="header-anchor" href="#导航故障的属性" aria-label="Permalink to &quot;导航故障的属性&quot;">​</a></h2><p>当导航失败时实例方法就会返回一个 <a href="/api/interfaces/NavigationFailure.html">NavigationFailure</a>，该对象会返回以下三个参数：</p><ul><li><code>from</code>: 当前路由信息。一个 <a href="/api/interfaces/RouteLocationNormalizedLoaded.html">规范化路由信息</a>。</li><li><code>to</code>: 即将前往的路由信息。一个 <a href="/api/interfaces/RouteLocationNormalizedLoaded.html">规范化路由信息</a>。</li><li><code>type</code>: 导航失败类型。 <ul><li><code>aborted</code>: 被中止，比如路由守卫中手动返回了 <code>false</code>。</li><li><code>cancelled</code>: 被取消，比如下一个导航已经开始而导航失败。</li><li><code>duplicated</code>: 重复导航，比如现在已经处于要导航到的路径而导航失败。</li></ul></li></ul>`,17),t=[l];function h(p,k,d,r,o,E){return a(),i("div",null,t)}const u=s(n,[["render",h]]);export{g as __pageData,u as default};
